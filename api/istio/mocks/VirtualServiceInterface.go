// Code generated by mockery v2.0.0-alpha.14. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha3 "github.com/gojek/merlin/istio/client-go/pkg/apis/networking/v1alpha3"
)

// VirtualServiceInterface is an autogenerated mock type for the VirtualServiceInterface type
type VirtualServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *VirtualServiceInterface) Create(_a0 *v1alpha3.VirtualService) (*v1alpha3.VirtualService, error) {
	ret := _m.Called(_a0)

	var r0 *v1alpha3.VirtualService
	if rf, ok := ret.Get(0).(func(*v1alpha3.VirtualService) *v1alpha3.VirtualService); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha3.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha3.VirtualService) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, options
func (_m *VirtualServiceInterface) Delete(name string, options *v1.DeleteOptions) error {
	ret := _m.Called(name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.DeleteOptions) error); ok {
		r0 = rf(name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Patch provides a mock function with given fields: name, pt, data, subresources
func (_m *VirtualServiceInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3.VirtualService, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, pt, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha3.VirtualService
	if rf, ok := ret.Get(0).(func(string, types.PatchType, []byte, ...string) *v1alpha3.VirtualService); ok {
		r0 = rf(name, pt, data, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha3.VirtualService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, types.PatchType, []byte, ...string) error); ok {
		r1 = rf(name, pt, data, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
